services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
            args:
                DOCKER_UID: ${DOCKER_UID:-1000}
                DOCKER_GID: ${DOCKER_GID:-1000}
        container_name: docker-app
        restart: unless-stopped
        user: '${DOCKER_UID}:${DOCKER_GID}'
        volumes:
            - .:/var/www/html
        networks:
            app-network:
                aliases:
                    - nginx
                    - db
                    - redis
                    - mailhog
        depends_on:
            db:
                condition: service_healthy
        entrypoint: ['/bin/sh', '-c', '/var/www/html/entrypoint.sh']
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        environment:
            DOCKER_UID: ${DOCKER_UID}
            DOCKER_GID: ${DOCKER_GID}
            XDG_CONFIG_HOME: /var/www/html

    redis:
        image: redis:alpine
        container_name: laravel-inertia-redis
        restart: unless-stopped
        networks:
            - app-network
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            retries: 3

    nginx:
        image: nginx:alpine
        container_name: laravel-inertia-nginx
        restart: unless-stopped
        depends_on:
            - app
        volumes:
            - .:/var/www/html
            - ./nginx.conf:/etc/nginx/conf.d/default.conf
        ports:
            - '80:80'
        networks:
            - app-network
        healthcheck:
            test: ['CMD', 'wget', '--spider', '-q', 'http://localhost']
            interval: 30s
            timeout: 10s
            retries: 3

    db:
        image: yobasystems/alpine-mariadb:latest
        container_name: laravel-inertia-db
        restart: unless-stopped
        environment:
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_USER: ${DB_USERNAME}
            MYSQL_PASSWORD: ${DB_PASSWORD}
        networks:
            - app-network
        volumes:
            - dbdata:/var/lib/mysql
        ports:
            - '3306:3306'
        healthcheck:
            test: mysqladmin ping -h localhost
            interval: 30s
            timeout: 30s
            retries: 3

    mailhog:
        image: 'mailhog/mailhog:latest'
        ports:
            - '${FORWARD_MAILHOG_PORT:-1025}:1025'
            - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
        networks:
            - app-network

    stripe-webhook:
        image: stripe/stripe-cli
        container_name: stripe-webhook-listener
        environment:
            - STRIPE_API_KEY=${STRIPE_SECRET}
        command: ['listen', '--forward-to', 'http://localhost/spark/webhook']
        network_mode: 'host'
        restart: unless-stopped

volumes:
    dbdata: {}

networks:
    app-network:
        external: true
        driver: bridge
